/* Any 타입 & Unknown 타입 */

/* Any 타입
특정 변수의 타입을 확실히 모를 때 사용하는 타입이다.
*/

/* 
변수를 하나 선언하고 해당 변수가 범용적으로 사용된다고 가정한다.
현재 숫자 10을 넣었으나 추후 문자열도 들어가야 한다고 가정한다.
*/
let anyVar = 10;
// anyVar = "10" // Type 'string' is not assignable to type 'number'.

/*
복습을 해보자면 타입스크립트는 기본적으로 변수의 타입을 지정하지 않아도  
초기화 하는 값을 기준으로 변수의 타입을 자동으로 추론한다.
이를 타입추론이라 부른다.
변수 anyVar는 정수값 10으로 초기화 되고 있기 때문에 number라는 타입으로 타입추론 된다.
그렇기 때문에 문자열 값을 넣으려고 시도하면 당연히 오류가 발생한다.

마치 자바스크립트 변수를 쓰듯 타입 검사 없이 타입 상관없이 아무 값이나 할당하려면 Any타입을 변수에 지정해주면 된다.
Any라는 것은 우리말로 모든, 누구나 라는 뜻이다.
Any Type이란 어떤 타입이던지 라는 뜻으로 이해할 수 있으며, 해당 변수의 타입어노테이션으로 any 키워드를 지정할 경우
어떤 타입이던지 해당 변수에 값을 할당할 수 있다. 라고 이해할 수 있다.
변수에 어떤 타입의 값이든 할당을 허용하지만 값이 할당되는 순간 타입추론을 통해 할당된 타입으로 타입이 변경된다.
*/

let anyVal:any = 10;
anyVal = "십"; // string 정상 저장 - typeof: string(타입추론)
anyVal = true; // boolean 정상 저장 - typeof: boolean(타입추론)
anyVal = {}; // 객체 정상 저장 - typeof: object(타입추론)
anyVal = () => {}; // 심지어 함수도 저장 가능 - typeof: function(타입추론)
anyVal.toUpperCase(); // 모든 타입이 될 수 있기 때문에 문자열에만 있는 메소드 사용 가능
anyVal.toFixed(); // 정수형에만 있는 메소드도 사용 가능 (제약없이 자유롭게 사용 가능)

let num: number = 10;
num = anyVal; // number타입 변수에 any타입 변수 할당시 타입오류 발생하지 않음.

/* 
위와같이 any타입을 변수에 지정할 경우 모든 타입의 값을 할당받을 수 있고,  
[반대]로 모든 타입의 변수에 any타입의 값이나 변수를 할당할 수도 있다.  
any타입은 타입스크립트의 타입검사를 통과하는 치트키 같은 타입이라고 생각하면 된다.  
그러나 ts-node나 tsx로 실행할 경우 runtime 오류가 발생한다.  
(TypeError: anyVal.toUpperCase is not a function)  
최종 초기화 값이 함수인데, 함수에서 문자열 함수를 호출하려고 하니 오류가 발생한것이다.  
any타입은 타입 검사 통과하는것이 아니라 사실 안하는것이라고 볼 수 있다.  
따라서 any타입을 지정할 경우 타입스크립트가 가지는 이점을 다 포기하는것과 다를 게 없다.  
타입 검사를 모두 다 통과(생략) 하고 런타임 에러가 발생하는 최악의 상황을 유발하게 된다.  
따라서 any타입은 가능한 한 최대한 사용하지 않는 편이 좋다.
*/


/* Unknown 타입
any와 비슷하지만 조금 다르다.
만약 변수에 어떤 타입이 들어올지 모를경우에는 any 혹은 unknown 둘중 하나를 쓸 수 있다.
이 역시 변수에 어떤 타입의 값이든 할당을 허용하지만 값이 할당되는 순간 타입추론을 통해 할당된 타입으로 타입이 변경된다.
*/

let unknownVar: unknown;
unknownVar = 1; // number
unknownVar = "1"; // string
unknownVar = () => {}; // 타입추론: function

/* Any 타입과의 차이점 1
any타입에서는 가능했던 모든 타입이 unknown타입의 변수에 할당 되는것과 [반대]로 다른 모든 타입 변수에 할당은 불가능 하다.
unknown타입은 any타입과는 다르게 모든 값을 저장할 수 있지만 반대로는 안된다.
아래와 같이 number 타입 변수에 unknown 타입 변수를 할당할 수 없다.
number 타입 뿐만 아니라 모든 타입의 변수에 할당할 수 없다.
*/
num = unknownVar; // Type 'unknown' is not assignable to type 'number'.

/* Any 타입과의 차이점 2
any타입과는 다르게 toUpperCase와 같은 메소드도 절대 허용되지 않는다.
덧셈 뺄셈 곱셈 나눗셈 등의 연산 자체도 unknown 타입에서 쓸수 없다.
 */
unknownVar.toUpperCase(); // unknown에서는 메소드도 절대 허용하지 않는다.

/* 타입 좁히기(타입 정제)
만약 unknown타입의 값을 활용하고 싶다면 조건문을 통해 사용가능.
조건문에서 typeof 연산자로 number타입임을 확실히 확인시켜 주었을 때만 변수의 타입을 원하는 타입으로 정제해서 사용 할 수 있게 된다.
(값이 할당되는 순간 할당된 값에 해당하는 타입으로 타입추론이 되어 타입이 변경되기 때문)
이러한 과정을 타입 정제 또는 타입 좁히기 라고 한다.
 */
if (typeof unknownVar === 'number') {
  num = unknownVar
}

/* 
변수에 저장할 값의 타입이 확실하지 않을 경우 any타입 보다는 조금 더 안전한 unknown타입을 활용하는것이 좋다.
unknown타입은 적어도 연산이나 메소드나 변수에나 값을 넣을 수 없기 때문에 런타임 에러를 일으키는 any타입보다는 안전하다.
*/